#!/usr/bin/env python
#
# Copyright 2007 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
import webapp2
import os
import jinja2
import re
from google.appengine.ext import db

# Setting up jinja templates file path
template_dir = os.path.join(os.path.dirname(__file__), 'templates')
jinja_env = jinja2.Environment(
    loader=jinja2.FileSystemLoader(template_dir),
    autoescape=True
    )

# regex requirements for user, password, email.
user_re = re.compile(r"^[a-zA-Z0-9_-]{3,20}$")
password_re = re.compile(r"^.{3,20}$")
email_re = re.compile(r"^[\S]+@[\S]+.[\S]+$")


# check validity of input based on regex reqs.
def valid_check(text_input, re_check):
    return re_check.match(text_input)


# jinja templates, located in /templates
front_page = 'front.html'
blog_post_page = 'blog-post.html'
newpost_page = 'newpost.html'
thanks_page = 'thanks-post.html'
main_page = 'main-page.html'
signup_page = 'signup.html'

# Blogs kind.  Each entity must have title and content.
class Blogs(db.Model):
    title = db.StringProperty(required=True)
    content = db.TextProperty(required=True)
    created = db.DateTimeProperty(auto_now_add=True)


class Handler(webapp2.RequestHandler):
    def write(self, *a, **kw):
        self.response.out.write(*a, **kw)

    def render_str(self, template, **params):
        t = jinja_env.get_template(template)
        return t.render(params)

    def render(self, template, **kw):
        self.write(self.render_str(template, **kw))


class NewPostHandler(Handler):
    def get(self):
        self.render(newpost_page)

    def post(self):
        title = self.request.get('subject')
        content = self.request.get('content')

        if title and content:
            # With proper submission, creates new blog entity for Blogs kind
            # Enters entity into Blogs
            # Then redirects user to the blog's specific page, using the blog's ID
            # ID generated by entry into the Blogs entity.
            new_blog = Blogs(title=title, content=content)
            new_blog.put()
            blog_id = new_blog.key().id()
            # print blog_id
            self.redirect('/blog/' + str(blog_id))
        else:
            # If user tries to submit blog w/ out title and content
            # Receives the following error.
            # Use input is preserved in the fields.
            error = 'Need both title and content'
            self.render(
                newpost_page,
                blog_title=title,
                blog_content=content,
                error=error)


class ThanksPageHandler(Handler):
    # Deprecated; Was using as placeholder for new post entry
    # /blog/thanks page still works, but not otherwise used.
    def get(self):
        self.render(thanks_page, redirect_main=True)
        # time.sleep(5)
        # self.redirect('/blog')


class BlogMainHandler(Handler):
    def get(self, blog_id=None):
        if blog_id:
            # Handles the /blog/#### case.
            # If digits passed in, checks if entity exists in database
            # Passes entity to blog_post_page template for a one-off page.
            key = db.Key.from_path('Blogs', int(blog_id))
            blog = db.get(key)
            if blog:
                self.render(blog_post_page, blog=blog)
            else:
                self.redirect('/blog')

        else:
            # if url is simply /blog, displays main_page
            # queries entire list of entities from Blogs
            # passes to main_page template, which will iterate over the list.
            # note - this isn't actually a list object, probably
            # not sure exactly what, should follow up.
            blogs = db.GqlQuery("""SELECT *
                from Blogs
                order by created desc
                limit 20
                """)

            self.render(main_page, blogs=blogs)


class SignupHandler(Handler):
    def get(self):
        self.render(signup_page)

    def post(self):
        username = self.request.get('username')
        password = self.request.get('password')
        password_verify = self.request.get('verify')
        email = self.request.get('email')

        username_error = ''
        password_error = ''
        password_mismatch = ''
        email_error = ''

        valid_input = True

        params = {
            'username': username,
            'email': email
        }

        if not valid_check(username, user_re):
            params['username_error'] = "Not a valid username."
            valid_input = False

        if not valid_check(password, password_re):
            params['password_error'] = "Not a valid password."
            valid_input = False
        elif password != password_verify:
            params['password_mismatch'] = "Passwords didn't match."
            valid_input = False

        if email and not valid_check(email, email_re):
            params['email_error'] = "Not a valid email"
            valid_input = False

        if username and password and password_verify and valid_input:
            self.redirect('/welcome?username=' + username)
        else:
            self.render(
                signup_page,
                **params
                )


class MainHandler(Handler):
    def get(self):
        self.redirect('/blog')


app = webapp2.WSGIApplication([
    ('/', MainHandler),
    ('/blog', BlogMainHandler),
    ('/blog/newpost', NewPostHandler),
    ('/blog/thanks', ThanksPageHandler),
    ('/blog/signup', SignupHandler),
    webapp2.Route(r'/blog/<blog_id:\d+>', BlogMainHandler)
], debug=True)
